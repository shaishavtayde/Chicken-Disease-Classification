#advantages
# IT knows where the stage of pipeline is.
# IT geenrates all logs, generate everything 
# If the pipeline is already ran it skips it.
#If i run it again it will skip, if nothing changed


#STEPS TO RUN
#1 Open gitbash, in anaconda env and folder
#2 Since DVC is built on GIT, dvc repro 
#3 dvg dag - to see grapgh visualize




stages:
  data_ingestion:
  #Running the stage, input command
    cmd: python src/cnnClassifier/pipeline/stage_01_data_ingestion.py
    deps:
    #Provide all the dependcies
      - src/cnnClassifier/pipeline/stage_01_data_ingestion.py
      - config/config.yaml
    outs:
    #Output of the pipeline
      - artifacts/data_ingestion/Chicken-fecal-images

  
  prepare_base_model:
    cmd: python src/cnnClassifier/pipeline/stage_02_prepare_base_model.py
    deps:
      - src/cnnClassifier/pipeline/stage_02_prepare_base_model.py
      - config/config.yaml
    #Parameters here can be found in Enitity config for reference
    params:
      - IMAGE_SIZE
      - INCLUDE_TOP
      - CLASSES
      - WEIGHTS
      - LEARNING_RATE
    outs:
      - artifacts/prepare_base_model

  
  training:
    cmd: python src/cnnClassifier/pipeline/stage_03_training.py
    deps:
      - src/cnnClassifier/pipeline/stage_03_training.py
      - src/cnnClassifier/components/prepare_callbacks.py
      - config/config.yaml
      - artifacts/data_ingestion/Chicken-fecal-images
      - artifacts/prepare_base_model
    params:
      - IMAGE_SIZE
      - EPOCHS
      - BATCH_SIZE
      - AUGMENTATION
    outs:
      - artifacts/training/model.h5

  evaluation:
    cmd: python src/cnnClassifier/pipeline/stage_04_evaluation.py
    deps:
      - src/cnnClassifier/pipeline/stage_04_evaluation.py
      - config/config.yaml
      - artifacts/data_ingestion/Chicken-fecal-images
      - artifacts/training/model.h5
    params:
      - IMAGE_SIZE
      - BATCH_SIZE
    metrics:
    - scores.json:
        cache: false